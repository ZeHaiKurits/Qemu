1. source qemu-2.0.0/build.env

---------------------------------------------------------------------------------------------------------------------------
gdb 編譯

./configure --enable-targets=all --enable-64-bit-bfd --prefix=/usr/local/gdb7.7

gdb 編譯新版修改  // 因為 gdb 會出現  'g' packet reply is too long:

修改gdb/remote.c文件，屏蔽process_g_packet函数中的下列两行：

if (buf_len > 2 * rsa->sizeof_g_packet)

error (_(“Remote ‘g’ packet reply is too long: %s”), rs->buf);

在其后添加：

if (buf_len > 2 * rsa->sizeof_g_packet) {
      rsa->sizeof_g_packet = buf_len ;
      for (i = 0; i < gdbarch_num_regs (gdbarch); i++)
      {
         if (rsa->regs[i].pnum == -1)
         continue;

         if (rsa->regs[i].offset >= rsa->sizeof_g_packet)
         rsa->regs[i].in_g_packet = 0;
         else
         rsa->regs[i].in_g_packet = 1;
      }
   }

--------------------------------------------------------------------------------------------------------------------------------------------------

Qemu 編譯
1. ./configure --prefix=/opt/qemu_bin --target-list="arm-softmmu arm-linux-user x86_64-linux-user x86_64-softmmu" --enable-debug
   ./configure --prefix=/opt/qemu_bin --enable-debug

2. make -j8

3. sudo make install


arm支持較好的qemu版本: qemu-linaro 
git clone git://git.linaro.org/qemu/qemu-linaro.git

---------------------------------------------------------------------------------------------------------------------------------------------------
# 建立一個小而美的 initramfs

只有 "Hello World" 一類的程式只能作切入點，還不能實際作點事情，從零到有建構 rootfs 也得花上一點功夫，還好，Ubuntu/Debian 已經提供靜態連結的 [BusyBox]，安裝方式很簡單：
$ sudo apt-get install busybox-static
隨後，系統會安裝 /bin/busybox 的執行檔，觀察一下：
$ file /bin/busybox
/bin/busybox: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), for GNU/Linux 2.6.8, statically linked, stripped
咱們就以此為基礎，建立一個小而美的 initramfs + kernel image：


$ mkdir initramfs-workspace
$ cd initramfs-workspace
$ mkdir -p busybox-initramfs/bin
$ mkdir -p busybox-initramfs/proc
$ cd busybox-initramfs/bin
$ cp /bin/busybox .
$ ./busybox --help | ruby -e 'STDIN.read.split(/functions:$/m)[1].split(/,/).each{|i|`ln -s busybox #{i.strip}` unless i=~/busybox/}'
$ cd ..
$ echo -e '#!/bin/busybox sh\nmount -t proc proc /proc\nexec busybox sh\n' > init ; chmod +x init
$ find . | cpio -o -H newc | gzip > ../busybox.initramfs.cpio.gz

---------------------------------------------------------------------------------------------------------------------------------------------------
#啟動
qemu-system-x86_64 -kernel bzImage -hda linux-0.2.img -append "root=/dev/sda"  -smp 1 -m 2048 -gdb tcp::1234 -S
qemu-system-x86_64 -kernel bzImage -initrd ../initramfs-workspace/busybox.initramfs.cpio.gz -hda /dev/zero -smp 1 -m 2048 -gdb tcp::1234 -S



# 另開終端機
cgdb vmlinux
b start_kernel
target remote localhost:1234
c

 

