1. source qemu-2.0.0/build.env

# build gdb 
1. cd gdb-7.7
2. ./configure --host=x86_64-linux-gnu --target=arm-linux 
3. time make -j8
4. cd gdb 
5. ./gdb --vertsion 
6. This GDB was configured as "--host=x86_64-linux-gnu --target=arm-linux"


# build gdbserver
1. ./configure  --host=arm-linux "CFLAGS=-m32" "CXXFLAGS=-m32" "LDFLAGS=-m32"
2. make -j8
3. ./gdbserver --version


---------------------------------------------------------------------------------------------------------------------------
gdb 編譯

./configure --enable-targets=all --enable-64-bit-bfd --prefix=/usr/local/gdb7.7

gdb 編譯新版修改  // 因為 gdb 會出現  'g' packet reply is too long:

修改gdb/remote.c文件，屏蔽process_g_packet函数中的下列两行：

if (buf_len > 2 * rsa->sizeof_g_packet)

error (_(“Remote ‘g’ packet reply is too long: %s”), rs->buf);

在其后添加：

if (buf_len > 2 * rsa->sizeof_g_packet) {
      rsa->sizeof_g_packet = buf_len ;
      for (i = 0; i < gdbarch_num_regs (gdbarch); i++)
      {
         if (rsa->regs[i].pnum == -1)
         continue;

         if (rsa->regs[i].offset >= rsa->sizeof_g_packet)
         rsa->regs[i].in_g_packet = 0;
         else
         rsa->regs[i].in_g_packet = 1;
      }
   }

--------------------------------------------------------------------------------------------------------------------------------------------------

Qemu 編譯
1. ./configure --prefix=/opt/qemu_bin --target-list="arm-softmmu arm-linux-user x86_64-linux-user x86_64-softmmu" --enable-debug
   ./configure --prefix=/opt/qemu_bin --enable-debug

2. make -j8

3. sudo make install














[技術] Build GDB for Linux ARM platform
Written on 11:05 下午 by Yu Lai
Note for building ARM GDB & GDB Server tools.
gdb part:
$cd gdb-7.4.1
$./configure --host=x86_64-linux-gnu --target=arm-linux \
--with-expat=yes \
CC=/usr/bin/cc \
CXX=/usr/bin/c++ \
AR=/usr/bin/ar \
AS=/usr/bin/as \
LD=/usr/bin/ld \
NM=/usr/bin/nm \
RANLIB=/usr/bin/ranlib \
STRIP=/usr/bin/strip \
OBJCOPY=/usr/bin/objcopy \
OBJDUMP=/usr/bin/objdump \
READELF=/usr/bin/readelf \
CC_FOR_TARGET=${CROSS_TOOL}gcc \
CXX_FOR_TARGET=${CROSS_TOOL}c++ \
AR_FOR_TARGET=${CROSS_TOOL}ar \
LD_FOR_TARGET=${CROSS_TOOL}ld \
NM_FOR_TARGET=${CROSS_TOOL}nm \
OBJDUMP_FOR_TARGET=${CROSS_TOOL}objdump \
RANLIB_FOR_TARGET=${CROSS_TOOL}ranlib \
READELF_FOR_TARGET=${CROSS_TOOL}readelf \
STRIP_FOR_TARGET=${CROSS_TOOL}strip
$make

gdbserver part:
$cd gdb/gdbserver
$./configure --host=arm-linux \
CC=${CROSS_TOOL}gcc \
CXX=${CROSS_TOOL}c++ \
AR=${CROSS_TOOL}ar \
LD=${CROSS_TOOL}ld \
NM=${CROSS_TOOL}nm \
OBJDUMP=${CROSS_TOOL}objdump \
RANLIB=${CROSS_TOOL}ranlib \
READELF=${CROSS_TOOL}readelf \
STRIP=${CROSS_TOOL}strip
$make
